{"version":3,"sources":["types/index.ts","reportWebVitals.ts","components/NumberDisplay/index.tsx","utils/index.ts","components/Button/index.tsx","constants/index.ts","components/DifficultChanger/index.tsx","Theme/ThemeProvider.tsx","components/ThemeSwitcher/index.tsx","assets/music/main.mp3","components/SoundButtons/index.tsx","components/App/index.tsx","index.tsx"],"names":["CellValue","CellState","Face","Difficult","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","NumberDisplay","value","className","Math","abs","toString","padStart","grabAllAdjacentCells","cells","rowParam","colParam","maxRows","maxCols","topLeftCell","topCell","topRightCell","rightCell","bottomRightCell","bottomCell","bottomLeftCell","leftCell","generateCells","numberOfBombs","row","push","col","none","state","closed","currentBombsNumber","randomRow","floor","random","randomColumn","bomb","placeBombs","rowIndex","colIndex","currentCell","numberBombs","openMultipleCells","newCells","slice","visible","Button","onClick","onContext","red","toggleMouseClick","flagged","onContextMenu","onMouseDown","onMouseUp","NUMBER_OF_BOMBS_EASY","DifficultChanger","onChangeDifficult","isGameStarted","disabled","easy","normal","hard","ThemeContext","React","createContext","ThemeProvider","children","localStorageTheme","localStorage","getItem","useState","theme","setTheme","useEffect","document","body","Provider","toggleTheme","currentTheme","setItem","ThemeSwitcher","useContext","charAt","toUpperCase","hidden","SoundButtons","isAppInit","playing","setPlaying","volume","setVolume","loop","mute","setMute","src","MainMusic","type","min","max","step","onChange","e","target","checked","Minesweeper","initialized","setInitialized","setMaxRows","setMaxCols","bombCounter","setBombCounter","initialCells","useMemo","setCells","smile","face","setFace","time","setTime","started","setStarted","lost","setLost","won","setWon","difficultLevel","setDifficultLevel","currentBombsCounter","setCurrentBombsCounter","timer","setInterval","clearInterval","handleCellClick","isABomb","includes","showAllBombs","safeClosedCellsExists","map","cell","handleCellContext","preventDefault","currentCells","currentTarget","oh","renderedCells","level","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6a68d88d.chunk.js","sourcesContent":["export enum CellValue {\r\n    none,\r\n    one,\r\n    two,\r\n    three,\r\n    four,\r\n    five,\r\n    six,\r\n    seven,\r\n    eight,\r\n    bomb\r\n}\r\n\r\nexport enum CellState {\r\n    closed,\r\n    visible,\r\n    flagged\r\n}\r\n\r\nexport type Cell = { value: CellValue, state: CellState, red?: boolean}\r\n\r\nexport enum Face {\r\n    smile = '😀',\r\n    oh = '😮',\r\n    lost = '😵',\r\n    won = '😎'\r\n}\r\n\r\nexport enum Difficult {\r\n    easy,\r\n    normal,\r\n    hard\r\n}","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react'\r\nimport './NumberDisplay.scss'\r\n\r\ninterface NumberDisplayProps {\r\n    value: number\r\n}\r\n\r\nconst NumberDisplay: React.FC<NumberDisplayProps> = ({value}) => {\r\n    return (\r\n        <div className={\"numberDisplay\"}>\r\n            {value < 0 ? `-${Math.abs(value).toString().padStart(2, \"0\")}` : value.toString().padStart(3, \"0\")}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NumberDisplay","import {Cell, CellState, CellValue} from \"../types\";\r\n\r\nconst grabAllAdjacentCells = (cells: Cell[][], rowParam: number, colParam: number, maxRows: number, maxCols: number): {\r\n    topLeftCell: Cell | null,\r\n    topCell: Cell | null,\r\n    topRightCell: Cell | null,\r\n    rightCell: Cell | null,\r\n    bottomRightCell: Cell | null,\r\n    bottomCell: Cell | null,\r\n    bottomLeftCell: Cell | null,\r\n    leftCell: Cell | null,\r\n} => {\r\n    const topLeftCell = rowParam > 0 && colParam > 0 ? cells[rowParam - 1][colParam - 1] : null\r\n    const topCell = rowParam > 0 ? cells[rowParam - 1][colParam] : null\r\n    const topRightCell = rowParam > 0 && colParam < maxCols ? cells[rowParam - 1][colParam + 1] : null\r\n    const rightCell = colParam < maxCols ? cells[rowParam][colParam + 1] : null\r\n    const bottomRightCell = rowParam < maxRows - 1 && colParam < maxCols - 1 ? cells[rowParam + 1][colParam + 1] : null\r\n    const bottomCell = rowParam < maxRows - 1 ? cells[rowParam + 1][colParam] : null\r\n    const bottomLeftCell = rowParam < maxRows - 1 && colParam > 0 ? cells[rowParam + 1][colParam - 1] : null\r\n    const leftCell = colParam > 0 ? cells[rowParam][colParam - 1] : null\r\n\r\n    return {\r\n        topLeftCell,\r\n        topCell,\r\n        topRightCell,\r\n        rightCell,\r\n        bottomRightCell,\r\n        bottomCell,\r\n        bottomLeftCell,\r\n        leftCell,\r\n    }\r\n}\r\n\r\n// randomly put bombs\r\nexport const placeBombs = (cells: Cell[][], numberOfBombs: number, currentBombsNumber: number, maxRows: number, maxCols: number) => {\r\n    while (currentBombsNumber < numberOfBombs) {\r\n        const randomRow = Math.floor(Math.random() * maxRows)\r\n        const randomColumn = Math.floor(Math.random() * maxCols)\r\n        const currentCell = cells[randomRow][randomColumn]\r\n        if (currentCell.value !== CellValue.bomb) {\r\n            cells[randomRow][randomColumn] = {\r\n                ...cells[randomRow][randomColumn], value: CellValue.bomb\r\n            }\r\n        }\r\n        currentBombsNumber++\r\n    }\r\n}\r\n\r\nexport const generateCells = (maxRows: number, maxCols: number, numberOfBombs: number): Cell[][] => {\r\n    let cells: Cell[][] = []\r\n\r\n    // generating all cells\r\n    for (let row = 0; row < maxRows; row++) {\r\n        cells.push([])\r\n        for (let col = 0; col < maxCols; col++) {\r\n            cells[row].push({\r\n                value: CellValue.none,\r\n                state: CellState.closed\r\n            })\r\n        }\r\n    }\r\n\r\n    placeBombs(cells, numberOfBombs, 0, maxRows, maxCols)\r\n\r\n    // calculate numbers for each cell\r\n    for (let rowIndex = 0; rowIndex < maxRows; rowIndex++) {\r\n        for (let colIndex = 0; colIndex < maxCols; colIndex++) {\r\n            const currentCell = cells[rowIndex][colIndex]\r\n            if (currentCell.value === CellValue.bomb) {\r\n                continue\r\n            }\r\n\r\n            let numberBombs = 0\r\n\r\n            const {\r\n                topLeftCell,\r\n                topCell,\r\n                topRightCell,\r\n                rightCell,\r\n                bottomRightCell,\r\n                bottomCell,\r\n                bottomLeftCell,\r\n                leftCell,\r\n            } = grabAllAdjacentCells(cells, rowIndex, colIndex, maxRows, maxCols)\r\n\r\n            if (topLeftCell?.value === CellValue.bomb) {\r\n                numberBombs++\r\n            }\r\n            if (topCell?.value === CellValue.bomb) {\r\n                numberBombs++\r\n            }\r\n            if (topRightCell?.value === CellValue.bomb) {\r\n                numberBombs++\r\n            }\r\n            if (rightCell?.value === CellValue.bomb) {\r\n                numberBombs++\r\n            }\r\n            if (bottomRightCell?.value === CellValue.bomb) {\r\n                numberBombs++\r\n            }\r\n            if (bottomCell?.value === CellValue.bomb) {\r\n                numberBombs++\r\n            }\r\n            if (bottomLeftCell?.value === CellValue.bomb) {\r\n                numberBombs++\r\n            }\r\n            if (leftCell?.value === CellValue.bomb) {\r\n                numberBombs++\r\n            }\r\n\r\n            if (numberBombs > 0) {\r\n                cells[rowIndex][colIndex] = {\r\n                    ...currentCell,\r\n                    value: numberBombs\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return cells\r\n}\r\n\r\nexport const openMultipleCells = (cells: Cell[][], rowParam: number, colParam: number, maxRows: number, maxCols: number): Cell[][] => {\r\n\r\n    let newCells = cells.slice()\r\n    const currentCell = newCells[rowParam][colParam]\r\n\r\n    newCells[rowParam][colParam].state = CellState.visible\r\n\r\n    const {\r\n        topLeftCell,\r\n        topCell,\r\n        topRightCell,\r\n        rightCell,\r\n        bottomRightCell,\r\n        bottomCell,\r\n        bottomLeftCell,\r\n        leftCell,\r\n    } = grabAllAdjacentCells(cells, rowParam, colParam, maxRows, maxCols)\r\n\r\n    if (topLeftCell?.state === CellState.closed && topLeftCell.value !== CellValue.bomb) {\r\n        if (topLeftCell.value === CellValue.none) {\r\n            cells = openMultipleCells(newCells, rowParam - 1, colParam - 1, maxRows, maxCols)\r\n        } else {\r\n            newCells[rowParam - 1][colParam - 1].state = CellState.visible\r\n        }\r\n    }\r\n\r\n    if (topCell?.state === CellState.closed && topCell.value !== CellValue.bomb) {\r\n        if (topCell.value === CellValue.none) {\r\n            cells = openMultipleCells(newCells, rowParam - 1, colParam, maxRows, maxCols)\r\n        } else {\r\n            newCells[rowParam - 1][colParam].state = CellState.visible\r\n        }\r\n    }\r\n\r\n    if (topRightCell?.state === CellState.closed && topRightCell.value !== CellValue.bomb) {\r\n        if (topRightCell.value === CellValue.none) {\r\n            cells = openMultipleCells(newCells, rowParam - 1, colParam + 1, maxRows, maxCols)\r\n        } else {\r\n            newCells[rowParam - 1][colParam + 1].state = CellState.visible\r\n        }\r\n    }\r\n\r\n    if (rightCell?.state === CellState.closed && rightCell.value !== CellValue.bomb) {\r\n        if (rightCell.value === CellValue.none) {\r\n            cells = openMultipleCells(newCells, rowParam, colParam + 1, maxRows, maxCols)\r\n        } else {\r\n            newCells[rowParam][colParam + 1].state = CellState.visible\r\n        }\r\n    }\r\n\r\n    if (bottomRightCell?.state === CellState.closed && bottomRightCell.value !== CellValue.bomb) {\r\n        if (bottomRightCell.value === CellValue.none) {\r\n            cells = openMultipleCells(newCells, rowParam + 1, colParam + 1, maxRows, maxCols)\r\n        } else {\r\n            newCells[rowParam + 1][colParam + 1].state = CellState.visible\r\n        }\r\n    }\r\n\r\n    if (bottomCell?.state === CellState.closed && bottomCell.value !== CellValue.bomb) {\r\n        if (bottomCell.value === CellValue.none) {\r\n            cells = openMultipleCells(newCells, rowParam + 1, colParam, maxRows, maxCols)\r\n        } else {\r\n            newCells[rowParam + 1][colParam].state = CellState.visible\r\n        }\r\n    }\r\n\r\n    if (bottomLeftCell?.state === CellState.closed && bottomLeftCell.value !== CellValue.bomb) {\r\n        if (bottomLeftCell.value === CellValue.none) {\r\n            cells = openMultipleCells(newCells, rowParam + 1, colParam - 1, maxRows, maxCols)\r\n        } else {\r\n            newCells[rowParam + 1][colParam - 1].state = CellState.visible\r\n        }\r\n    }\r\n\r\n    if (leftCell?.state === CellState.closed && leftCell.value !== CellValue.bomb) {\r\n        if (leftCell.value === CellValue.none) {\r\n            cells = openMultipleCells(newCells, rowParam, colParam - 1, maxRows, maxCols)\r\n        } else {\r\n            newCells[rowParam][colParam - 1].state = CellState.visible\r\n        }\r\n    }\r\n\r\n    return newCells\r\n}","import React from 'react'\r\nimport './Button.scss'\r\nimport {CellState, CellValue} from \"../../types\";\r\n\r\ninterface ButtonProps {\r\n    row: number\r\n    col: number\r\n    state: CellState\r\n    value: CellValue,\r\n    red?: boolean\r\n    onClick: (rowParam: number, colParam: number) => (...args: any) => void\r\n    onContext: (rowParam: number, colParam: number) => (...args: any) => void\r\n    toggleMouseClick: () => (...args: any) => void\r\n}\r\n\r\nconst Button: React.FC<ButtonProps> = ({\r\n                                           row,\r\n                                           col,\r\n                                           state,\r\n                                           value,\r\n                                           onClick,\r\n                                           onContext,\r\n                                           red,\r\n                                           toggleMouseClick\r\n                                       }) => {\r\n\r\n    const renderContent = (): React.ReactNode => {\r\n        if (state == CellState.visible) {\r\n            if (value === CellValue.bomb) {\r\n                return <span> 💣 </span>\r\n            } else if (value === CellValue.none) {\r\n                return null\r\n            }\r\n\r\n            return value\r\n        } else if (state === CellState.flagged) {\r\n            return <span> 🚩 </span>\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={`button ${state == CellState.visible ? 'visible' : ''} value-${value} ${state == CellState.flagged ? 'flagged' : ''} ${red ? 'red' : ''} `}\r\n            onClick={onClick(row, col)}\r\n            onContextMenu={onContext(row, col)}\r\n            onMouseDown={toggleMouseClick()}\r\n            onMouseUp={toggleMouseClick()}\r\n        >\r\n            {renderContent()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Button","export const MAX_COLS_EASY = 9\r\nexport const MAX_ROWS_EASY = 9\r\nexport const MAX_COLS_NORMAL = 16\r\nexport const MAX_ROWS_NORMAL = 16\r\nexport const MAX_COLS_HARD = 30\r\nexport const MAX_ROWS_HARD = 16\r\nexport const NUMBER_OF_BOMBS_EASY = 10\r\nexport const NUMBER_OF_BOMBS_NORMAL = 40\r\nexport const NUMBER_OF_BOMBS_HARD = 99","import React from \"react\"\r\nimport './DifficultChanger.scss'\r\nimport {Difficult} from \"../../types\";\r\n\r\ninterface DifficultChangerProps {\r\n    onChangeDifficult: (level: Difficult) => void,\r\n    isGameStarted: boolean\r\n\r\n}\r\n\r\nconst DifficultChanger: React.FC<DifficultChangerProps> = ({onChangeDifficult, isGameStarted}) => {\r\n\r\n    return (\r\n        <div className={'difficultChanger'}>\r\n            <button disabled={isGameStarted} onClick={() => onChangeDifficult(Difficult.easy)}> Easy </button>\r\n            <button disabled={isGameStarted} onClick={() => onChangeDifficult(Difficult.normal)}> Normal </button>\r\n            <button disabled={isGameStarted} onClick={() => onChangeDifficult(Difficult.hard)}> Hard </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DifficultChanger","import React, {useEffect, useState} from 'react'\r\n\r\ntype Theme = 'light' | 'dark'\r\ntype ThemeContext = {\r\n    theme: Theme\r\n    toggleTheme: () => void\r\n}\r\n\r\nexport const ThemeContext = React.createContext<ThemeContext>({} as ThemeContext)\r\n\r\nexport const ThemeProvider: React.FC = ({children}) => {\r\n    const localStorageTheme = localStorage.getItem('theme') as Theme\r\n    const [theme, setTheme] = useState<Theme>(localStorageTheme ? localStorageTheme : 'light')\r\n\r\n    useEffect(() => {\r\n        if (theme === 'light') {\r\n            document.body.className = 'theme-light'\r\n        } else {\r\n            document.body.className = 'theme-dark'\r\n        }\r\n    }, [theme])\r\n\r\n    const toggleTheme = () => {\r\n        let currentTheme\r\n\r\n        if (theme === 'light') {\r\n            setTheme('dark')\r\n            currentTheme = 'dark'\r\n        } else {\r\n            setTheme('light')\r\n            currentTheme = 'light'\r\n        }\r\n\r\n        localStorage.setItem('theme', currentTheme)\r\n    }\r\n\r\n    return (\r\n        <ThemeContext.Provider value={{theme, toggleTheme}} >\r\n            {children}\r\n        </ThemeContext.Provider>\r\n    )\r\n}","import React, {useContext} from \"react\";\r\nimport {ThemeContext} from \"../../Theme/ThemeProvider\";\r\nimport './ThemeSwitcher.scss'\r\n\r\nconst ThemeSwitcher: React.FC = () => {\r\n\r\n    const {theme, toggleTheme} = useContext(ThemeContext)\r\n\r\n    return (\r\n        <label className={'themeSwitcher'}>\r\n            {theme.charAt(0).toUpperCase() + theme.slice(1)} theme\r\n            <div className=\"wrapper\">\r\n                <div className={`btn ${theme === 'light' ? 'on' : 'off'}`} />\r\n            </div>\r\n            <button hidden onClick={toggleTheme}> {theme} </button>\r\n        </label>\r\n    )\r\n}\r\n\r\nexport default ThemeSwitcher","export default __webpack_public_path__ + \"static/media/main.ee61ed4d.mp3\";","import React, {useCallback, useEffect, useMemo, useRef, useState} from 'react'\r\n// @ts-ignore\r\nimport MainMusic from '../../assets/music/main.mp3'\r\nimport './SoundButtons.scss'\r\nimport ReactHowler from \"react-howler\";\r\n\r\ntype SoundButtonsProps = {\r\n    isAppInit: boolean\r\n}\r\n\r\nconst SoundButtons: React.FC<SoundButtonsProps> = ({isAppInit}) => {\r\n\r\n    const [playing, setPlaying] = useState<boolean>(false)\r\n    const [volume, setVolume] = useState<number>(0.5)\r\n    const [loop, setLoop] = useState<boolean>(true)\r\n    const [mute, setMute] = useState<boolean>(false)\r\n\r\n    useEffect(() => {\r\n        if (isAppInit) {\r\n            setPlaying(true)\r\n        }\r\n    }, [])\r\n\r\n    const handleVolumeChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setVolume(+e.target.value)\r\n    }\r\n\r\n    const onMuteSound = () => {\r\n        setMute(!mute)\r\n    }\r\n\r\n    return (\r\n        <div className={'soundButtons'}>\r\n            <ReactHowler\r\n                src={MainMusic}\r\n                playing={playing}\r\n                volume={volume}\r\n                loop={loop}\r\n                mute={mute}\r\n            />\r\n            <div className={'playButtons'}>\r\n                <button onClick={() => setPlaying(true)}>▶️</button>\r\n                <button onClick={() => setPlaying(false)}>⏸️</button>\r\n            </div>\r\n\r\n            <div className={`volume ${mute ? 'disabled' : ''}`} >\r\n                <label>\r\n                    Volume: <br/>\r\n                    <span className='slider-container'>\r\n                      <input className={'slider'}\r\n                          disabled={mute}\r\n                          type='range'\r\n                          min='0'\r\n                          max='1'\r\n                          step='.1'\r\n                          value={volume}\r\n                          onChange={handleVolumeChange}\r\n                      />\r\n                    </span>\r\n                    {volume * 100}\r\n                </label>\r\n            </div>\r\n            <label className={'mute'}>\r\n                Mute:\r\n                <input type=\"checkbox\" checked={mute} onChange={onMuteSound} />\r\n            </label>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SoundButtons","import React, {useEffect, useMemo, useState} from 'react'\r\nimport './App.scss'\r\nimport NumberDisplay from \"../NumberDisplay\";\r\nimport {generateCells, openMultipleCells} from \"../../utils\";\r\nimport Button from \"../Button\";\r\nimport {Cell, CellState, CellValue, Difficult, Face} from '../../types'\r\nimport {\r\n    MAX_COLS_EASY,\r\n    MAX_COLS_HARD,\r\n    MAX_COLS_NORMAL,\r\n    MAX_ROWS_EASY,\r\n    MAX_ROWS_HARD,\r\n    MAX_ROWS_NORMAL,\r\n    NUMBER_OF_BOMBS_EASY,\r\n    NUMBER_OF_BOMBS_HARD,\r\n    NUMBER_OF_BOMBS_NORMAL\r\n} from \"../../constants\";\r\nimport DifficultChanger from \"../DifficultChanger\";\r\nimport ThemeSwitcher from \"../ThemeSwitcher\";\r\nimport SoundButtons from \"../SoundButtons\";\r\n\r\nconst Minesweeper: React.FC = () => {\r\n\r\n    const [initialized, setInitialized] = useState<boolean>(false)\r\n    const [maxRows, setMaxRows] = useState<number>(MAX_ROWS_EASY)\r\n    const [maxCols, setMaxCols] = useState<number>(MAX_COLS_EASY)\r\n    const [bombCounter, setBombCounter] = useState<number>(NUMBER_OF_BOMBS_EASY)\r\n\r\n    const initialCells = useMemo(() => generateCells(maxRows, maxCols, NUMBER_OF_BOMBS_EASY), [] )\r\n\r\n    const [cells, setCells] = useState<Cell[][]>(initialCells)\r\n    // const [cells, setCells] = useState<Cell[][]>(generateCells(maxRows, maxCols, NUMBER_OF_BOMBS_EASY))\r\n    const [face, setFace] = useState<Face>(Face.smile)\r\n    const [time, setTime] = useState<number>(0)\r\n    const [started, setStarted] = useState<boolean>(false)\r\n    const [lost, setLost] = useState<boolean>(false)\r\n    const [won, setWon] = useState<boolean>(false)\r\n    const [difficultLevel, setDifficultLevel] = useState<Difficult>(Difficult.easy)\r\n\r\n    const [currentBombsCounter, setCurrentBombsCounter] = useState<number>(NUMBER_OF_BOMBS_EASY)\r\n\r\n    useEffect(() => {\r\n        if (started && time < 999) {\r\n            const timer = setInterval(() => {\r\n                setTime(time + 1)\r\n            }, 1000)\r\n\r\n            return () => {\r\n                clearInterval(timer)\r\n            }\r\n        }\r\n    }, [started, time])\r\n\r\n    useEffect(() => {\r\n        if (lost) {\r\n            setStarted(false)\r\n            setFace(Face.lost)\r\n        }\r\n    }, [lost])\r\n\r\n    useEffect(() => {\r\n        if (won) {\r\n            setStarted(false)\r\n            setFace(Face.won)\r\n        }\r\n    }, [won])\r\n\r\n    const handleCellClick = (rowParam: number, colParam: number) => (): void => {\r\n        if (won || lost) {\r\n            return\r\n        }\r\n\r\n        let newCells = cells.slice();\r\n\r\n        // start the game\r\n        if (!started) {\r\n            let isABomb = newCells[rowParam][colParam].value === CellValue.bomb;\r\n            while (isABomb) {\r\n                newCells = generateCells(maxRows, maxCols, bombCounter);\r\n                if (newCells[rowParam][colParam].value !== CellValue.bomb) {\r\n                    isABomb = false;\r\n                    break;\r\n                }\r\n            }\r\n            setStarted(true);\r\n        }\r\n\r\n        const currentCell = newCells[rowParam][colParam];\r\n\r\n        if ([CellState.flagged, CellState.visible].includes(currentCell.state)) {\r\n            return;\r\n        }\r\n\r\n        if (currentCell.value === CellValue.bomb) {\r\n            setLost(true);\r\n            newCells[rowParam][colParam].red = true;\r\n            newCells = showAllBombs();\r\n            setCells(newCells);\r\n            return;\r\n        } else if (currentCell.value === CellValue.none) {\r\n            newCells = openMultipleCells(newCells, rowParam, colParam, maxRows, maxCols);\r\n        } else {\r\n            newCells[rowParam][colParam].state = CellState.visible;\r\n        }\r\n\r\n        // Check to see if you have won\r\n        let safeClosedCellsExists = false;\r\n        for (let row = 0; row < MAX_ROWS_EASY; row++) {\r\n            for (let col = 0; col < MAX_COLS_EASY; col++) {\r\n                const currentCell = newCells[row][col];\r\n\r\n                if (currentCell.value !== CellValue.bomb && currentCell.state === CellState.closed) {\r\n                    safeClosedCellsExists = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!safeClosedCellsExists) {\r\n            newCells = newCells.map(row =>\r\n                row.map(cell => {\r\n                    if (cell.value === CellValue.bomb) {\r\n                        return {\r\n                            ...cell,\r\n                            state: CellState.flagged\r\n                        };\r\n                    }\r\n                    return cell;\r\n                })\r\n            );\r\n            setWon(true);\r\n            setBombCounter(0)\r\n        }\r\n\r\n        setCells(newCells);\r\n    }\r\n\r\n    const handleCellContext = (rowParam: number, colParam: number) => (e: React.MouseEvent): void => {\r\n        e.preventDefault()\r\n        if (!started) {\r\n            return\r\n        }\r\n\r\n        const currentCells = cells.slice()\r\n        const currentCell = currentCells[rowParam][colParam]\r\n\r\n        if (currentCell.state === CellState.visible) {\r\n            return;\r\n        } else if (currentCell.state === CellState.closed) {\r\n            currentCells[rowParam][colParam].state = CellState.flagged\r\n            setCells(currentCells)\r\n            setBombCounter(bombCounter - 1)\r\n        } else if (currentCell.state === CellState.flagged) {\r\n            currentCells[rowParam][colParam].state = CellState.closed;\r\n            setCells(currentCells);\r\n            setBombCounter(bombCounter + 1);\r\n        }\r\n    }\r\n\r\n    const handleFaceClick = (): void => {\r\n        setStarted(false)\r\n        setTime(0)\r\n        setBombCounter(currentBombsCounter)\r\n        setCells(generateCells(maxRows, maxCols, currentBombsCounter))\r\n        setFace(Face.smile)\r\n        setLost(false)\r\n        setWon(false)\r\n    }\r\n\r\n    const toggleMouseClick = () => (e: React.MouseEvent): void => {\r\n        if (won || lost) {\r\n            if (e.currentTarget.className !== \"face\") {\r\n                return\r\n            }\r\n        }\r\n\r\n        if (e.type === 'mousedown') {\r\n            setFace(Face.oh)\r\n        } else if (e.type === 'mouseup') {\r\n            setFace(Face.smile)\r\n        }\r\n    }\r\n\r\n    const renderedCells = useMemo(() => cells.map((row, rowIndex) => row.map((cell, colIndex) => (\r\n            <Button\r\n                key={`${rowIndex} - ${colIndex}`}\r\n                row={rowIndex}\r\n                col={colIndex}\r\n                red={cell.red}\r\n                state={cell.state}\r\n                value={cell.value}\r\n                onClick={handleCellClick}\r\n                onContext={handleCellContext}\r\n                toggleMouseClick={toggleMouseClick}\r\n            />\r\n        )))\r\n    , [started, won, lost, difficultLevel, cells])\r\n\r\n    const showAllBombs = (): Cell[][] => {\r\n        const currentCells = cells.slice()\r\n        return currentCells.map(row =>\r\n            row.map(cell => {\r\n                if (cell.value === CellValue.bomb) {\r\n                    return {\r\n                        ...cell,\r\n                        state: CellState.visible\r\n                    }\r\n                }\r\n                return cell\r\n            })\r\n        )\r\n    }\r\n\r\n    const onChangeDifficult = (level: Difficult): void => {\r\n        setFace(Face.smile)\r\n        setTime(0)\r\n        setWon(false)\r\n        setLost(false)\r\n\r\n        if (level === Difficult.easy) {\r\n            setDifficultLevel(Difficult.easy)\r\n            setMaxRows(MAX_ROWS_EASY)\r\n            setMaxCols(MAX_COLS_EASY)\r\n            setBombCounter(NUMBER_OF_BOMBS_EASY)\r\n            setCurrentBombsCounter(NUMBER_OF_BOMBS_EASY)\r\n            setCells(generateCells(MAX_ROWS_EASY, MAX_COLS_EASY, NUMBER_OF_BOMBS_EASY))\r\n        }\r\n        if (level === Difficult.normal) {\r\n            setDifficultLevel(Difficult.normal)\r\n            setMaxRows(MAX_ROWS_NORMAL)\r\n            setMaxCols(MAX_COLS_NORMAL)\r\n            setBombCounter(NUMBER_OF_BOMBS_NORMAL)\r\n            setCurrentBombsCounter(NUMBER_OF_BOMBS_NORMAL)\r\n            setCells(generateCells(MAX_ROWS_NORMAL, MAX_COLS_NORMAL, NUMBER_OF_BOMBS_NORMAL))\r\n        }\r\n        if (level === Difficult.hard) {\r\n            setDifficultLevel(Difficult.hard)\r\n            setMaxRows(MAX_ROWS_HARD)\r\n            setMaxCols(MAX_COLS_HARD)\r\n            setBombCounter(NUMBER_OF_BOMBS_HARD)\r\n            setCurrentBombsCounter(NUMBER_OF_BOMBS_HARD)\r\n            setCells(generateCells(MAX_ROWS_HARD, MAX_COLS_HARD, NUMBER_OF_BOMBS_HARD))\r\n        }\r\n    }\r\n\r\n    if (!initialized) {\r\n        return (\r\n            <div className={'introScreen'}>\r\n                <button onClick={() => setInitialized(true)}>\r\n                    PLAY\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className={`Minesweeper ${!started ? 'not-started' : ''}`}>\r\n            <SoundButtons isAppInit={initialized}/>\r\n            <ThemeSwitcher/>\r\n            <div className={\"header\"}>\r\n                <NumberDisplay value={bombCounter}/>\r\n                <div className={'face'} onClick={handleFaceClick} onMouseDown={toggleMouseClick()}>\r\n                    <span> {face} </span>\r\n                </div>\r\n                <NumberDisplay value={time}/>\r\n            </div>\r\n            <div\r\n                className={`body  ${difficultLevel === Difficult.easy ? 'difficult_easy' : ''}  ${difficultLevel === Difficult.normal ? 'difficult_normal' : ''}   ${difficultLevel === Difficult.hard ? 'difficult_hard' : ''} `}>\r\n                {renderedCells}\r\n            </div>\r\n            <div className={'difficult'}>\r\n                <DifficultChanger onChangeDifficult={onChangeDifficult} isGameStarted={started}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Minesweeper","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport Minesweeper from \"./components/App\";\r\nimport {ThemeProvider} from \"./Theme/ThemeProvider\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <ThemeProvider>\r\n            <Minesweeper/>\r\n        </ThemeProvider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}